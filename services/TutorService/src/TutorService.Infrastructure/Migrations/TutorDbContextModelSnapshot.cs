// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TutorService.Infrastructure.Persistence;

#nullable disable

namespace TutorService.Infrastructure.Migrations
{
    [DbContext(typeof(TutorDbContext))]
    partial class TutorDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TutorService.Domain.Entities.Tutor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Tutors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cdf8756b-1b69-49b3-b89a-a7ac0652b080"),
                            UserId = new Guid("b2c3d4e5-f6a7-890b-cdef-1234567890ab")
                        });
                });

            modelBuilder.Entity("TutorService.Domain.Entities.TutorCourse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AssignmentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TutorId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TutorId");

                    b.ToTable("TutorCourses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7c7753bb-90ad-48f6-8260-4fa8ef82322f"),
                            AssignmentDate = new DateTime(2025, 6, 3, 22, 9, 11, 333, DateTimeKind.Utc).AddTicks(4724),
                            CourseId = new Guid("6daa15cc-f355-42e7-99aa-9a52086350a7"),
                            TutorId = new Guid("cdf8756b-1b69-49b3-b89a-a7ac0652b080")
                        },
                        new
                        {
                            Id = new Guid("70466362-d316-4385-a0b5-b5df1eb8b779"),
                            AssignmentDate = new DateTime(2025, 6, 3, 22, 9, 11, 333, DateTimeKind.Utc).AddTicks(4845),
                            CourseId = new Guid("0365eed4-e67d-460a-abd7-6742b3698d86"),
                            TutorId = new Guid("cdf8756b-1b69-49b3-b89a-a7ac0652b080")
                        });
                });

            modelBuilder.Entity("TutorService.Domain.Entities.TutorCourse", b =>
                {
                    b.HasOne("TutorService.Domain.Entities.Tutor", "Tutor")
                        .WithMany("TutorCourses")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("TutorService.Domain.Entities.Tutor", b =>
                {
                    b.Navigation("TutorCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
