// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UserService.Infrastructure.Persistence;

#nullable disable

namespace UserService.Infrastructure.Migrations
{
    [DbContext(typeof(UserDbContext))]
    [Migration("20250512050851_userServiceMigration")]
    partial class userServiceMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("UserService.Domain.Entities.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("FacebookUrl")
                        .HasColumnType("text");

                    b.Property<string>("InstagramUrl")
                        .HasColumnType("text");

                    b.Property<string>("LinkedInUrl")
                        .HasColumnType("text");

                    b.Property<string>("Nationality")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("TwitterUrl")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Profiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d1e2f3a4-b5c6-7890-abcd-ef1234567890"),
                            Address = "123 Main St",
                            Bio = "A passionate student.",
                            City = "New York",
                            Country = "USA",
                            FacebookUrl = "https://facebook.com/johndoe",
                            Nationality = "American",
                            Phone = "555-0123",
                            State = "NY",
                            TwitterUrl = "https://twitter.com/johndoe",
                            UserId = new Guid("b1c2d3e4-f5f6-7890-abcd-ef1234567890"),
                            ZipCode = "10001"
                        },
                        new
                        {
                            Id = new Guid("e1f2a3b4-c5d6-7890-abcd-ef1234567890"),
                            Address = "456 Oak St",
                            Bio = "An enthusiastic learner.",
                            City = "Los Angeles",
                            Country = "USA",
                            LinkedInUrl = "https://linkedin.com/in/janesmith",
                            Nationality = "American",
                            Phone = "555-0456",
                            State = "CA",
                            UserId = new Guid("c2d3e4f5-f678-90ab-cdef-1234567890ab"),
                            ZipCode = "90001"
                        },
                        new
                        {
                            Id = new Guid("febfaa10-358c-7890-abcd-ef1234567890"),
                            Address = "789 Admin Rd",
                            Bio = "An experienced administrator.",
                            City = "Chicago",
                            Country = "USA",
                            LinkedInUrl = "https://linkedin.com/in/adminuser",
                            Nationality = "American",
                            Phone = "555-0789",
                            State = "IL",
                            UserId = new Guid("a1b2c3d4-e5f6-7890-abcd-ef1234567890"),
                            ZipCode = "60601"
                        },
                        new
                        {
                            Id = new Guid("9eb76b25-ce6d-7890-abcd-ef1234567890"),
                            Address = "101 Tutor Ln",
                            Bio = "A dedicated tutor.",
                            City = "Seattle",
                            Country = "USA",
                            Nationality = "American",
                            Phone = "555-1011",
                            State = "WA",
                            TwitterUrl = "https://twitter.com/tutorteacher",
                            UserId = new Guid("b2c3d4e5-f6a7-890b-cdef-1234567890ab"),
                            ZipCode = "98101"
                        });
                });

            modelBuilder.Entity("UserService.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Tutor"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Student"
                        });
                });

            modelBuilder.Entity("UserService.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b1c2d3e4-f5f6-7890-abcd-ef1234567890"),
                            Email = "john.doe@example.com",
                            Firstname = "John",
                            Lastname = "Doe",
                            PasswordHash = "$2a$12$FtTE2pZ1h7nRML.MFelVL.d6eyre70x295KX/T6kiaqW55v0Fdo2a",
                            RoleId = 3
                        },
                        new
                        {
                            Id = new Guid("c2d3e4f5-f678-90ab-cdef-1234567890ab"),
                            Email = "jane.smith@example.com",
                            Firstname = "Jane",
                            Lastname = "Smith",
                            PasswordHash = "$2a$12$FtTE2pZ1h7nRML.MFelVL.d6eyre70x295KX/T6kiaqW55v0Fdo2a",
                            RoleId = 3
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-7890-abcd-ef1234567890"),
                            Email = "admin.user@example.com",
                            Firstname = "Admin",
                            Lastname = "User",
                            PasswordHash = "$2a$12$FtTE2pZ1h7nRML.MFelVL.d6eyre70x295KX/T6kiaqW55v0Fdo2a",
                            RoleId = 1
                        },
                        new
                        {
                            Id = new Guid("b2c3d4e5-f6a7-890b-cdef-1234567890ab"),
                            Email = "tutor.teacher@example.com",
                            Firstname = "Tutor",
                            Lastname = "Teacher",
                            PasswordHash = "$2a$12$FtTE2pZ1h7nRML.MFelVL.d6eyre70x295KX/T6kiaqW55v0Fdo2a",
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("UserService.Domain.Entities.Profile", b =>
                {
                    b.HasOne("UserService.Domain.Entities.User", null)
                        .WithOne("Profile")
                        .HasForeignKey("UserService.Domain.Entities.Profile", "UserId");
                });

            modelBuilder.Entity("UserService.Domain.Entities.User", b =>
                {
                    b.HasOne("UserService.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("UserService.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("UserService.Domain.Entities.User", b =>
                {
                    b.Navigation("Profile")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
