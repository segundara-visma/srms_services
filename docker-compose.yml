services:
  authservice:
    build:
      context: ./services/AuthService
      dockerfile: Dockerfile  # Ensure you are using a Dockerfile for build
    ports:
      - "5000:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - Redis__ConnectionString=redis:6379  # Add Redis connection string environment variable
      - Redis__InstanceName=SRMServiceInstance  # Optionally, set instance name
    depends_on:
      - userservice
      - authdb
      - migrate_authservice
    networks:
      - backend

  userservice:
    build:
      context: ./services/UserService
      dockerfile: Dockerfile  # Ensure you are using a Dockerfile for build
    ports:
      - "5001:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - Redis__ConnectionString=redis:6379  # Add Redis connection string environment variable
      - Redis__InstanceName=SRMServiceInstance # Optionally, set instance name
    networks:
      - backend
    depends_on:
      - userdb  # Ensure that the database is started before the User Service
      - migrate_userservice

  userdb:
    image: postgres:latest  # Use a PostgreSQL version (e.g., 13)
    environment:
      - POSTGRES_USER=postgres  # Database user
      - POSTGRES_PASSWORD=segundara  # Database password
      - POSTGRES_DB=UserServiceDb  # Database name
    volumes:
      - userdb_data:/var/lib/postgresql/data  # Persist data on the host machine
    networks:
      - backend
    ports:
      - "5434:5432"  # Expose PostgreSQL port to the host (optional)
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d UserServiceDb -h userdb"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  authdb:
    image: postgres:latest  # Use a PostgreSQL version (e.g., 13)
    environment:
      - POSTGRES_USER=postgres  # Database user
      - POSTGRES_PASSWORD=segundara  # Database password
      - POSTGRES_DB=AuthServiceDb  # Database name
    volumes:
      - authdb_data:/var/lib/postgresql/data  # Persist data on the host machine
    networks:
      - backend
    ports:
      - "5433:5432"  # Expose PostgreSQL port to the host (optional)
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d AuthServiceDb -h authdb"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  migrate_userservice:
    build:
      context: ./services/UserService
      dockerfile: Dockerfile.migrate_userservice  # Reference to Dockerfile for migrations
    depends_on:
      - userdb
    networks:
      - backend

  migrate_authservice:
    build:
      context: ./services/AuthService
      dockerfile: Dockerfile.migrate_authservice  # Reference to Dockerfile for migrations
    depends_on:
      - authdb
    networks:
      - backend

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
  userdb_data:
  authdb_data: