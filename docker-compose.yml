services:
  authservice:
    build:
      context: ./services/AuthService
      dockerfile: Dockerfile  # Ensure you are using a Dockerfile for build
    ports:
      - "5000:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - Redis__ConnectionString=redis:6379  # Add Redis connection string environment variable
      - Redis__InstanceName=SRMServiceInstance  # Optionally, set instance name
    depends_on:
      - userservice
      - authdb
      - migrate_authservice
    networks:
      - backend

  userservice:
    build:
      context: ./services/UserService
      dockerfile: Dockerfile  # Ensure you are using a Dockerfile for build
    ports:
      - "5001:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - Redis__ConnectionString=redis:6379  # Add Redis connection string environment variable
      - Redis__InstanceName=SRMServiceInstance # Optionally, set instance name
    networks:
      - backend
    depends_on:
      - userdb  # Ensure that the database is started before the User Service
      - migrate_userservice

  courseservice:
    build:
      context: ./services/CourseService
      dockerfile: Dockerfile  # Ensure you are using a Dockerfile for build
    ports:
      - "5002:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - Redis__ConnectionString=redis:6379  # Add Redis connection string environment variable
      - Redis__InstanceName=SRMServiceInstance # Optionally, set instance name
    networks:
      - backend
    depends_on:
      - coursedb  # Ensure that the database is started before the Course Service
      - migrate_courseservice

  studentservice:
    build:
      context: ./services/StudentService
      dockerfile: Dockerfile  # Ensure you are using a Dockerfile for build
    ports:
      - "5003:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - Redis__ConnectionString=redis:6379  # Add Redis connection string environment variable
      - Redis__InstanceName=SRMServiceInstance # Optionally, set instance name
    networks:
      - backend
    depends_on:
      - studentdb  # Ensure that the database is started before the Student Service
      - migrate_studentservice

  enrollmentservice:
    build:
      context: ./services/EnrollmentService
      dockerfile: Dockerfile  # Ensure you are using a Dockerfile for build
    ports:
      - "5004:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - Redis__ConnectionString=redis:6379  # Add Redis connection string environment variable
      - Redis__InstanceName=SRMServiceInstance # Optionally, set instance name
    networks:
      - backend
    depends_on:
      - enrollmentdb  # Ensure that the database is started before the Enrollment Service
      - migrate_enrollmentservice

  gradeservice:
    build:
      context: ./services/GradeService
      dockerfile: Dockerfile  # Ensure you are using a Dockerfile for build
    ports:
      - "5005:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - Redis__ConnectionString=redis:6379  # Add Redis connection string environment variable
      - Redis__InstanceName=SRMServiceInstance # Optionally, set instance name
    networks:
      - backend
    depends_on:
      - gradedb  # Ensure that the database is started before the Grade Service
      - migrate_gradeservice

  reportservice:
    build:
      context: ./services/ReportService
      dockerfile: Dockerfile  # Ensure you are using a Dockerfile for build
    ports:
      - "5006:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - Redis__ConnectionString=redis:6379  # Add Redis connection string environment variable
      - Redis__InstanceName=SRMServiceInstance # Optionally, set instance name
    networks:
      - backend
    depends_on:
      - reportdb  # Ensure that the database is started before the Report Service
      - migrate_reportservice

  authdb:
    image: postgres:latest  # Use a PostgreSQL version (e.g., 13)
    environment:
      - POSTGRES_USER=postgres  # Database user
      - POSTGRES_PASSWORD=segundara  # Database password
      - POSTGRES_DB=AuthServiceDb  # Database name
    volumes:
      - authdb_data:/var/lib/postgresql/data  # Persist data on the host machine
    networks:
      - backend
    ports:
      - "5433:5432"  # Expose PostgreSQL port to the host (optional)
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d AuthServiceDb -h authdb"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  userdb:
    image: postgres:latest  # Use a PostgreSQL version (e.g., 13)
    environment:
      - POSTGRES_USER=postgres  # Database user
      - POSTGRES_PASSWORD=segundara  # Database password
      - POSTGRES_DB=UserServiceDb  # Database name
    volumes:
      - userdb_data:/var/lib/postgresql/data  # Persist data on the host machine
    networks:
      - backend
    ports:
      - "5434:5432"  # Expose PostgreSQL port to the host (optional)
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d UserServiceDb -h userdb"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  coursedb:
    image: postgres:latest  # Use a PostgreSQL version (e.g., 13)
    environment:
      - POSTGRES_USER=postgres  # Database user
      - POSTGRES_PASSWORD=segundara  # Database password
      - POSTGRES_DB=CourseServiceDb  # Database name
    volumes:
      - coursedb_data:/var/lib/postgresql/data  # Persist data on the host machine
    networks:
      - backend
    ports:
      - "5435:5432"  # Expose PostgreSQL port to the host (optional)
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d CourseServiceDb -h coursedb"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  studentdb:
    image: postgres:latest  # Use a PostgreSQL version (e.g., 13)
    environment:
      - POSTGRES_USER=postgres  # Database user
      - POSTGRES_PASSWORD=segundara  # Database password
      - POSTGRES_DB=StudentServiceDb  # Database name
    volumes:
      - studentdb_data:/var/lib/postgresql/data  # Persist data on the host machine
    networks:
      - backend
    ports:
      - "5436:5432"  # Expose PostgreSQL port to the host (optional)
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d StudentServiceDb -h studentdb"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  enrollmentdb:
    image: postgres:latest  # Use a PostgreSQL version (e.g., 13)
    environment:
      - POSTGRES_USER=postgres  # Database user
      - POSTGRES_PASSWORD=segundara  # Database password
      - POSTGRES_DB=EnrollmentServiceDb  # Database name
    volumes:
      - enrollmentdb_data:/var/lib/postgresql/data  # Persist data on the host machine
    networks:
      - backend
    ports:
      - "5437:5432"  # Expose PostgreSQL port to the host (optional)
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d EnrollmentServiceDb -h enrollmentdb"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  gradedb:
    image: postgres:latest  # Use a PostgreSQL version (e.g., 13)
    environment:
      - POSTGRES_USER=postgres  # Database user
      - POSTGRES_PASSWORD=segundara  # Database password
      - POSTGRES_DB=GradeServiceDb  # Database name
    volumes:
      - gradedb_data:/var/lib/postgresql/data  # Persist data on the host machine
    networks:
      - backend
    ports:
      - "5438:5432"  # Expose PostgreSQL port to the host (optional)
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d GradeServiceDb -h gradedb"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  reportdb:
    image: postgres:latest  # Use a PostgreSQL version (e.g., 13)
    environment:
      - POSTGRES_USER=postgres  # Database user
      - POSTGRES_PASSWORD=segundara  # Database password
      - POSTGRES_DB=ReportServiceDb  # Database name
    volumes:
      - reportdb_data:/var/lib/postgresql/data  # Persist data on the host machine
    networks:
      - backend
    ports:
      - "5439:5432"  # Expose PostgreSQL port to the host (optional)
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ReportServiceDb -h reportdb"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  migrate_userservice:
    build:
      context: ./services/UserService
      dockerfile: Dockerfile.migrate_userservice  # Reference to Dockerfile for migrations
    depends_on:
      - userdb
    networks:
      - backend

  migrate_authservice:
    build:
      context: ./services/AuthService
      dockerfile: Dockerfile.migrate_authservice  # Reference to Dockerfile for migrations
    depends_on:
      - authdb
    networks:
      - backend

  migrate_courseservice:
    build:
      context: ./services/CourseService
      dockerfile: Dockerfile.migrate_courseservice  # Reference to Dockerfile for migrations
    depends_on:
      - coursedb
    networks:
      - backend

  migrate_studentservice:
    build:
      context: ./services/StudentService
      dockerfile: Dockerfile.migrate_studentservice  # Reference to Dockerfile for migrations
    depends_on:
      - studentdb
    networks:
      - backend

  migrate_enrollmentservice:
    build:
      context: ./services/EnrollmentService
      dockerfile: Dockerfile.migrate_enrollmentservice  # Reference to Dockerfile for migrations
    depends_on:
      - enrollmentdb
    networks:
      - backend

  migrate_gradeservice:
    build:
      context: ./services/GradeService
      dockerfile: Dockerfile.migrate_gradeservice  # Reference to Dockerfile for migrations
    depends_on:
      - gradedb
    networks:
      - backend

  migrate_reportservice:
    build:
      context: ./services/ReportService
      dockerfile: Dockerfile.migrate_reportservice  # Reference to Dockerfile for migrations
    depends_on:
      - reportdb
    networks:
      - backend

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

networks:
  backend:
    driver: bridge

volumes:
  userdb_data:
  authdb_data:
  coursedb_data:
  studentdb_data:
  enrollmentdb_data:
  gradedb_data:
  reportdb_data:
